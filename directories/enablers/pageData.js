var types = [
    'API Management',
    'Core Context',
    'Data Monetization',
    'Data Publication',
    'IoT Agents',
    'Media Streams',
    'Processing',
    'Robotics',
    'Security',
    'Third Party',
    'Visualisation'
];
var domains = [
    'Big Data',
    'Cloud-Edge',
    'Context Broker',
    'Data Connector',
    'Data Exchange',
    'Data Persistence',
    'Event Processing',
    'Identity Manager',
    'IoT Devices',
    'Media Server',
    'NGSI-LD',
    'NGSI-v2',
    'PDP',
    'PEP Proxy',
    'Short Term History',
    'Video Filters'
];
var technologies = [
    'AMPQ',
    'Apache Flink',
    'Apache Spark',
    'Arcgis',
    'Blockchain',
    'Carto',
    'Cassandra',
    'CKAN',
    'CoAP',
    'CrateDB',
    'DDS',
    'DKAN',
    'DynamoDB',
    'eDelivery',
    'Elasticsearch',
    'eMail',
    'EPCIS',
    'HDFS',
    'HTTP',
    'IDS',
    'Kafka',
    'Keycloak',
    'Keyrock',
    'Keystone',
    'LoRa',
    'LWM2M',
    'MongoDB',
    'MQTT',
    'MySQL',
    'Node.js',
    'OneM2M',
    'OPC-UA',
    'PostgreSQL',
    'PySpark',
    'ROS',
    'ROS2',
    'SigFox',
    'SMS',
    'SOCRATA',
    'Timescale',
    'WebRTC',
    'XACML'
];

var modalData = [
    {
        name: 'Core Context Management',
        type: 'Core Context',
        badge:
            "<img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'>",
        content:
            '<p>This chapter contains:</p><ul><li>Context Brokers</li><li>Data Connectors</li></ul><p>A Context Broker component is the core and mandatory component of any “Powered by FIWARE” platform or solution. It enables to manage context information in a highly decentralised and large-scale manner. A wide variety of Data Connectors are also available.</p>'
    },
    {
        name: 'Context Processing, Analysis and Visualisation',
        badge:
            "<img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ProcessingAnalysis.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Visualization.svg'>",
        content:
            '<p>This chapter contains:</p> <ul> <li>Decision making and Inference from Context</li><li>Graphs, Dashboards and Business Intellegence</li></ul><p>A number of Generic Enablers are available making it easier to process, analyze or visualize context information for the purpose of implementing the feedback loop expected in any “smart” application.</p>'
    },

    {
        name: 'Interface with IoT, Robots and Third-Party Systems',
        badge:
            "<img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_MediaStreams.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Robotics.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ThirdParty.svg'>",
        content:
            '<p>This chapter offers:</p><ul><li>Maintainance of interoperable Sensors and Actuators</li><li>Linking Robotic goals and sensors as context data</li><li>Retrieving context data from Cameras</li><li>Pushing Context Data to event based systems</li></ul><p>A number of Generic Enablers are available making it easier to interface with the Internet of Things, Robots and Third-party systems for the purpose of gathering valuable context information or trigger actuations in response to context updates.</p>'
    },
    {
        name: 'Context Data/API Management, Publication and Monetization',
        badge:
            "<img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_APIManagement.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DataMonetization.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DataPublication.svg'><img decoding='async' class='cat-logo' src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'>",
        content:
            '<p>This chapter contains:</p> <p>Context data resources can be published in common data formats or a fee charged for access. You should secure access to services within a “Powered by FIWARE” architecture by using Security components.</p>'
    },
    {
        name: 'Deployment Tools',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DeploymentTools.svg'/>",
        content:
            '<p>This chapter covers:</p> <ul><li>Deploying FIWARE Systems at scale</li><li>Container Images of FIWARE Components</li></ul><p>FIWARE components can be deployed using standard containerisation techniques. Most components are directly available as Docker Images. For proper scalable solutions, Helm Charts also are available.</p>'
    },
    {
        name: 'Orion',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/telefonicaid/fiware-orion.svg' alt='License' /> <img src='https://img.shields.io/github/release-date/telefonicaid/fiware-orion.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/telefonicaid/fiware-orion/latest.svg' alt='' /></p> <h4 id='whatisorion'>What is Orion?</h4> <p>The Orion Context Broker is an implementation of the Publish/Subscribe Context Broker GE, providing the NGSI interfaces. Using these interfaces, clients can do several operations:</p> <ul> <li>Register context producer applications, e.g. a temperature sensor within a room</li> <li>Update context information, e.g. send updates of temperature</li> <li>Being notified when changes on context information take place (e.g. the temperature has changed) or with a given frequency (e.g. get the temperature each minute)</li> <li>Query context information. The Orion Context Broker stores context information updated from applications, so queries are resolved based on that information.</li> </ul> <h4 id='whyuseorion'>Why Use Orion?</h4> <p>If you are developing a Data/Context scenario, a broker like the Orion Context Broker is a must. You would need a component in the architecture able to mediate between consumer producers (e.g. sensors) and the context consumer applications (e.g. an mobile phone applications taking advantage of the context information provided by the sensors). The Orion Context Broker fulfils this functionality in your architecture.</p> <p>Orion is an implementation of the FIWARE Publish/Subscribe Context Broker Generic Enabler. More specifically, Orion implements the following API and Open Specification:</p> <ul> <li><a href='https://swagger.lab.fiware.org/?url=https://raw.githubusercontent.com/Fiware/specifications/master/OpenAPI/ngsiv2/ngsiv2-openapi.json'>NGSI-v2</a></li> </ul> <p>For context data management, NGSI and the Orion context broker have been accepted as standards or recommendations by a variety of independent standards bodies, for example, GSMA recommends NSGI as a standard for relevant parts of their <a href='https://www.gsma.com/iot/wp-content/uploads/2016/11/CLP.25-v1.0.pdf'>IoT Big Data architecture</a> and promotes the Orion Context Broker as the primary example of the standard and NGSI specification has been selected by the European Commission as a <a href='https://ec.europa.eu/cefdigital/wiki/display/CEFDIGITAL/Context+Broker'>CEF Building Block</a> for the implementation of new smart applications and Public Administration.</p> <p>The use of the Orion context broker is mandatory for any <a href='https://marketplace.fiware.org/pages/platforms'>platform</a> or <a href='https://marketplace.fiware.org/pages/solutions'>solution</a> to be labelled as “Powered by FIWARE” within the <a href='https://marketplace.fiware.org/'>FIWARE marketplace</a></p>",
        domain: 'Context Broker,NGSI-v2',
        technology: 'HTTP',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/fiware-orion/',
        docker: 'https://quay.io/repository/fiware/orion',
        documentation: 'https://fiware-orion.rtfd.io/'
    },
    {
        name: 'Orion-LD',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/FIWARE/context.Orion-LD.svg' alt='License' /> <img src='https://img.shields.io/github/release-date/FIWARE/context.Orion-LD.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/FIWARE/context.Orion-LD/latest.svg' alt='' /></p> <h4 id='whatisorionld'>What is Orion-LD?</h4> <p>Orion-LD is an alternative NGSI-LD Context Broker written in C/C++. It is a standalone executable and therefore small, fast, lightweight and easy to handle. Context brokers allow for the management and requesting context of information in a structured manner based on linked data standards following the NGSI-LD specification. Orion-LD is more suitable for smaller installations or possibly in embedded environments - it currently supports only a subset of the standard NGSI-LD endpoints.</p> <h4 id='whyuseorionld'>Why Use Orion-LD?</h4> <p>Orion-LD implements the NGSI-LD linked data interface, which is the evolution of NGSI-v2 and previous versions going back to the OMA NGSI context interfaces. This standardized version is based on the NGSI-LD specification published by the ETSI Industry Specification Group on Context Information Management.</p> <p>NGSI-LD has a number of new features compared to NGSI-v2. NGSI-LD distinguishes properties and relationships instead of only having attributes. While properties have values, relationships explicitly refer to other entities. The result is an explicit entity graph, as specialized knowledge graph. Relationships can be followed to find relevant related entities. NGSI-LD is based on JSON-LD, where LD stands for linked data. As required in JSON-LD, NGSI-LD uses entity types, relationships and properties defined as unique URIs. The representation of the data is still concise as shortname strings can be used, the mapping to URIs is done in an <code>@context</code> element that can be part of the JSON or be referenced as a header. As JSON-LD is a serialization of RDF, NGSI-LD provides a semantic grounding and can be used with semantic tools and combined with other information.</p>",
        domain: 'Context Broker,NGSI-LD',
        technology: 'HTTP',
        status: 'Full',
        gitHub: 'https://github.com/FIWARE/context.Orion-LD',
        docker: 'https://quay.io/repository/fiware/orion-ld',
        documentation: 'https://github.com/FIWARE/context.Orion-LD/tree/develop/doc/manuals-ld'
    },
    {
        name: 'Scorpio',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/nec.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/badge/license-BSD--4--clause-green' alt='License' /> <img src='https://img.shields.io/github/release-date/ScorpioBroker/ScorpioBroker.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/ScorpioBroker/ScorpioBroker/latest.svg' alt='' /></p> <h4 id='whatisscorpio'>What is Scorpio?</h4> <p>Scorpio is an NGSI-LD Broker that allows managing and requesting context information. Context Producers can manage their context – creating, updating, appending and deleting context information. Context Consumers can request the context information they require, either identifying the entity or discover relevant entities by providing the entity type, possibly filtering according to property value, existing relationship and/or geographic scope provided as a GeoJSON feature.</p> <p>Two interaction styles are supported, a synchronous query-response, and an asynchronous subscribe / notify, where notifications can be based on a change in property or relationship, or on a fixed time interval. In addition to the regular context interface that provides the most current properties and relationships for each entity, Scorpio implements NGSI-LD’s optional temporal interface for requesting historic information, e.g. the property values measured within a specified time interval.</p> <p>Scorpio supports multiple deployment configurations including centralized, distributed and federated ones. In addition to the Context Producers mentioned above, there can be Context Sources that themselves implement the NGSI-LD interface. These Context Sources can register themselves with the information they can provide on request (not the information (values) itself).</p> <p>A Scorpio Broker in a distributed setting can then discover the Context Sources that may have information for answering a request based on their registrations, request and aggregate the information from different Context Sources and provide it to the requesting Context Consumer. In a federated setting the Context Source can itself be an NGSI-LD Broker. Federations can be used to combine information from multiple providers that want to (partially) share information. An important difference is then typically in the granularity of the registration, e.g. “I have information about entities of entity type building within a geographic area”, instead of “I have information about Building X”</p> <h4 id='whyusescorpio'>Why Use Scorpio?</h4> <p>Scorpio implements NGSI-LD, which is the evolution of NGSI-v2 and previous versions going back to the OMA NGSI context interfaces. This standardized version is based on the NGSI-LD specification published by the ETSI Industry Specification Group on Context Information Management.</p> <p>NGSI-LD has a number of new features compared to NGSI-v2. NGSI-LD distinguishes properties and relationships instead of only having attributes. While properties have values, relationships explicitly refer to other entities. The result is an explicit entity graph, as specialized knowledge graph. Relationships can be followed to find relevant related entities. NGSI-LD is based on JSON-LD, where LD stands for linked data. As required in JSON-LD, NGSI-LD uses entity types, relationships and properties defined as unique URIs. The representation of the data is still concise as shortname strings can be used, the mapping to URIs is done in an <code>@context</code> element that can be part of the JSON or be referenced as a header. As JSON-LD is a serialization of RDF, NGSI-LD provides a semantic grounding and can be used with semantic tools and combined with other information.</p> <p>Scorpio supports different deployment configurations, which support scalability and extension of scenarios in an evolutionary way. For example two separate deployments can be combined or for scalability reasons different brokers can be used – completely transparent to Context Consumers that can still use a single point of access. Scorpio also implements the optional temporal NGSI-LD interface, so any updated context information can automatically be made available as history information through the temporal interface.</p>",
        domain: 'Context Broker,NGSI-LD',
        technology: 'HTTP',
        status: 'Full',
        gitHub: 'https://github.com/ScorpioBroker/ScorpioBroker',
        docker: 'https://cloud.docker.com/u/scorpiobroker/',
        documentation: 'https://scorpio.rtfd.io/'
    },
    {
        name: 'Stellio',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/stellio-hub/stellio-context-broker.svg' alt='License' /> <img src='https://img.shields.io/github/last-commit/stellio-hub/stellio-context-broker.svg' alt='' /> <img src='https://img.shields.io/github/tag/stellio-hub/stellio-context-broker.svg' alt='' /></p> <h4 id='whatisstellio'>What is Stellio?</h4> <p>Stellio is a NGSI-LD context broker implementing the API specification published by the ETSI Industry Specification Group for Context Information Management (ISG CIM). Context information means any piece of data which is contextualized in time, space and in relation to other data through linked data principles.</p> <p>Stellio is built around a Kafka message broker for improved extensibility, scalability and decoupling of services. These services embed a graph database (Neo4J) for context management as well as a timeseries (TimescaleDB) and geospatial (PostGIS) database to manage temporal and geospatial properties.</p> <p>Stellio is developed in Kotlin and lays on the Spring Boot and Spring Cloud frameworks. It is based on a micro-services architecture and follows the reactive and functional paradigms.</p> <p>Stellio acts as a central broker. It currently supports major operations on context information, subscriptions and temporal queries and targets full compliance with the NGSI-LD specification by the end of 2020. It does not aim to support NGSIv1 and NGSIv2 specifications.</p> <h4 id='whyusestellio'>Why use Stellio?</h4> <p>In order to take the full benefit of the linked data nature of the NGSI-LD data model, Stellio uses the Neo4J labelled property graph database for the storage of the context information. Beside benefiting from Neo4J capabilities to efficiently handle graph data, this provides the underlying structure to perform syntactic and semantic validation of data, and opens up the door to exploit and analyze the graph with graph driven data science algorithms.</p> <p>In addition, Stellio includes the support of the NGSI-LD API for querying the temporal evolution of entities, as long as the interface for performing geospatial queries. The included TimescaleDB and PostGIS extensions of the well-known PostgreSQL database allow efficient queries while allowing off-the-shelves storing of large volumes of historical data.</p>",
        domain: 'Context Broker,NGSI-LD',
        technology: 'HTTP',
        status: 'Full',
        gitHub: 'https://github.com/stellio-hub/stellio-context-broker',
        docker: 'https://hub.docker.com/orgs/stellio/repositories/',
        documentation: 'https://stellio.rtfd.io/'
    },
    {
        name: 'NGSI-JS',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/ficodes.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Data Connector',
        technology: 'Node.js',
        status: 'Full',
        gitHub: 'https://github.com/Ficodes/ngsijs',
        docker: 'https://quay.io/repository/fiware/ngsiproxy',
        documentation: ''
    },
    {
        name: 'STH-Comet',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/telefonicaid/fiware-cygnus.svg' alt='License' /> <img src='https://img.shields.io/github/release-date/telefonicaid/fiware-cygnus.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/telefonicaid/fiware-cygnus/latest.svg' alt='' /></p> <h4 id='whatiscygnus'>What is Cygnus?</h4> <p>Cygnus is a connector in charge of persisting context data sources into other third-party databases and storage systems, creating a historical view of the context. Internally, Cygnus is based on Apache Flume, <a href='https://flume.apache.org/'>Flume</a> is a data flow system based on the concepts of flow-based programming. It supports powerful and scalable directed graphs of data routing, transformation, and system mediation logic. It was built to automate the flow of data between systems. While the term 'dataflow' can be used in a variety of contexts, we use it here to mean the automated and managed flow of information between systems.</p> <p>Each data persistence agent within Cygnus is composed of three parts - a listener or source in charge of receiving the data, a channel where the source puts the data once it has been transformed into a Flume event, and a sink, which takes Flume events from the channel in order to persist the data within its body into a third-party storage.</p> <h4 id='whyusecygnus'>Why Use Cygnus?</h4> <p>Persisting historical context data is useful for big data analysis - it can be used to discover trends, or data can be sampled and aggregated to remove the influence of outlying data measurements. However within each Smart Solution, the significance of each entity type will differ and entities and attributes may need to be sampled at different rates.</p> <p>Since the business requirements for using context data differ from application to application, no single standard use case for historical data persistence exists. Therefore rather than overloading the context broker with the job of historical context data persistence, this role has been separated out into a separate, highly configurable component - Cygnus.</p> <p>Cygnus plays the role of a connector between the Orion Context Broker (which is an <a href='https://swagger.lab.fiware.org/?url=https://raw.githubusercontent.com/Fiware/specifications/master/OpenAPI/ngsiv2/ngsiv2-openapi.json'>NGSI</a> source of data) and a wide range of external systems such as <a href='https://www.mysql.com/'>MySQL</a>, <a href='https://www.mongodb.org/'>MongoDB</a> etc. You should use Cygnus if you need to process and persist context data so that you can keep a historical record. Cygnus can also be used the filter and repost context data back into Orion.</p>",
        domain: 'Data Connector,Short Term History',
        technology: 'MongoDB',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/fiware-sth-comet',
        docker: 'https://quay.io/repository/fiware/sth-comet',
        documentation: 'https://fiware-sth-comet.rtfd.io/'
    },
    {
        name: 'Cygnus',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/telefonicaid/fiware-sth-comet.svg' alt='License' /> <img src='https://img.shields.io/github/release-date/telefonicaid/fiware-sth-comet.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/telefonicaid/fiware-sth-comet/latest.svg' alt='' /></p> <h4 id='whatissthcomet'>What is STH Comet?</h4> <p>Short Time Historic (STH) - Comet is a component of the FIWARE ecosystem in charge of managing (storing and retrieving) historical raw and aggregated time series context information about the evolution in time of context data (i.e., entity attribute values) registered in an Orion Context Broker instance.</p> <h4 id='whyusesthcomet'>Why use STH Comet?</h4> <p>The creation and analysis of trend data is a common requirement of context-driven systems - therefore the FIWARE platform offers a generic enabler (STH-Comet) specifically to deal with the issue of persisting and interpreting time series data.</p> <p>Within the FIWARE platform, historical context data can be persisted to a database - this results in a series of data points. Each time-stamped data point represents the state of context entities at a given moment in time. The individual data points are relatively meaningless on their own, it is only through combining a series data points that meaningful statistics such as maxima, minima and trends can be observed.</p>",
        domain: 'Data Connector,Data Persistence',
        technology: 'HDFS,MySQL,CKAN,MongoDB,Kafka,DynamoDB,PostgreSQL,Carto,Elasticsearch,Arcgis',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/fiware-cygnus',
        docker: 'https://quay.io/repository/fiware/cygnus-ngsi',
        documentation: 'https://fiware-cygnus.rtfd.io/'
    },
    {
        name: 'Draco',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/university-politecnica-of-madrid.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content:
            "<p><img src='https://img.shields.io/github/license/ging/fiware-draco.svg' alt='License' /> <img src='https://img.shields.io/github/release-date/ging/fiware-draco.svg' alt='' /> <img src='https://img.shields.io/github/commits-since/ging/fiware-draco/latest.svg' alt='' /></p> <h4 id='whatisdraco'>What is Draco?</h4> <p>Draco is a connector in charge of persisting context data sources into other third-party databases and storage systems, creating a historical view of the context. Internally, Draco is based on Apache NiFi. <a href='https://nifi.apache.org'>NiFi</a> is a popular framework for data management and processing from multiple sources.</p> <p>Draco plays the role of a connector between the Orion Context Broker (which is an <a href='https://swagger.lab.fiware.org/?url=https://raw.githubusercontent.com/Fiware/specifications/master/OpenAPI/ngsiv2/ngsiv2-openapi.json'>NGSI</a> source of data) source of data) and a wide range of external systems such as MySQL, MongoDB etc. You can use Draco if you need to process and persist context data so that you can keep a historical record. Draco can also be used to filter and repost context data back into Orion.</p> <h4 id='whyusedraco'>Why Use Draco?</h4> <p>Persisting historical context data is useful for big data analysis - it can be used to discover trends, or data can be sampled and aggregated to remove the influence of outlying data measurements. However within each Smart Solution, the significance of each entity type will differ and entities and attributes may need to be sampled at different rates.</p> <p>Since the business requirements for using context data differ from application to application, no single standard use case for historical data persistence exists. Therefore rather than overloading the context broker with the job of historical context data persistence, this role has been separated out into another enabler. Amongst the advantages of the component, Draco offers a flexible graphical interface so it is possible to amend your data flows according to your current business needs.</p>",
        domain: 'Data Connector,Data Persistence',
        technology: 'MongoDB,MySQL,PostgreSQL,CKAN,Carto,Cassandra,HDFS',
        status: 'Full',
        gitHub: 'https://github.com/ging/fiware-draco',
        docker: 'https://quay.io/repository/fiware/draco',
        documentation: 'https://fiware-draco.rtfd.io/'
    },
    {
        name: 'Cosmos Flink',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/university-politecnica-of-madrid.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Big Data',
        technology: 'Apache Flink',
        status: 'Full',
        gitHub: 'https://github.com/ging/fiware-cosmos-orion-flink-connector/',
        docker: '',
        documentation: 'https://fiware-cosmos-flink.readthedocs.io/'
    },
    {
        name: 'Cosmos Spark',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/university-politecnica-of-madrid.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Big Data',
        technology: 'Apache Spark',
        status: 'Full',
        gitHub: 'https://github.com/ging/fiware-cosmos-orion-spark-connector',
        docker: '',
        documentation: 'https://fiware-cosmos-spark.readthedocs.io/'
    },
    {
        name: 'QuantumLeap',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/martel-innovate.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Data Connector,Short Term History',
        technology: 'CrateDB,Timescale',
        status: 'Full',
        gitHub: 'https://github.com/smartsdk/ngsi-timeseries-api',
        docker: 'https://quay.io/repository/fiware/quantumleap',
        documentation: 'https://quantumleap.rtfd.io/'
    },
    {
        name: 'PySpark Connector',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/engineering.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Big Data',
        technology: 'PySpark',
        status: 'Incubating',
        gitHub: 'https://github.com/Engineering-Research-and-Development/fiware-orion-pyspark-connector',
        docker: 'https://hub.docker.com/r/rdlabengpa/fiware-orion-pyspark-connector',
        documentation: 'https://fiware-orion-pyspark-connector.readthedocs.io/'
    },
    {
        name: 'Canis Major',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Data Persistence',
        technology: 'Blockchain',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/CanisMajor',
        docker: 'https://quay.io/repository/fiware/canis-major',
        documentation: 'https://fiware.github.io/CanisMajor/'
    },
    {
        name: 'Apollo',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Core Context',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Core.svg'/>",
        content: '',
        domain: 'Data Persistence',
        technology: 'HTTP',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/apollo',
        docker: 'https://quay.io/repository/fiware/apollo',
        documentation: 'https://github.com/FIWARE/apollo/README.md'
    },
    {
        name: 'IoT Agent for JSON',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'HTTP,AMPQ,MQTT',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/iotagent-json',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for LWM2M',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'LWM2M,CoAP',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/lightweightm2m-iotagent',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for Ultralight',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'HTTP,AMPQ,MQTT',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/iotagent-ul',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for LoRaWAN',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'LoRa',
        status: 'Full',
        gitHub: 'https://github.com/Atos-Research-and-Innovation/IoTagent-LoRaWAN',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for OPC-UA',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/engineering.png',
        type: 'Robotics',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Robotics.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'OPC-UA',
        status: 'Full',
        gitHub: 'https://github.com/Engineering-Research-and-Development/iotagent-opcua',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for Sigfox',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'SigFox',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/sigfox-iotagent',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent for ISOXML',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'HTTP',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/iotagent-isoxml',
        docker: '',
        documentation: ''
    },
    {
        name: 'IoT Agent library',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'Node.js',
        status: 'Full',
        gitHub: 'https://github.com/telefonicaid/iotagent-node-lib',
        docker: '',
        documentation: ''
    },
    {
        name: 'Kurento',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/naeva-tec.png',
        type: 'Media Streams',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_MediaStreams.svg'/>",
        content: '',
        domain: 'Media Server',
        technology: 'WebRTC',
        status: 'Full',
        gitHub: 'https://github.com/Kurento/kurento-media-server.',
        docker: '',
        documentation: ''
    },
    {
        name: 'OpenVidu',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/naeva-tec.png',
        type: 'Media Streams',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_MediaStreams.svg'/>",
        content: '',
        domain: 'Video Filters',
        technology: 'WebRTC',
        status: 'Full',
        gitHub: 'https://github.com/OpenVidu/openvidu',
        docker: '',
        documentation: ''
    },
    {
        name: 'OpenMTC',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'IoT Agents',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_IOTAgents.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'OneM2M',
        status: 'Incubating',
        gitHub: 'https://github.com/OpenMTC/OpenMTC',
        docker: '',
        documentation: ''
    },
    {
        name: 'Fast DDS',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/eprosima.png',
        type: 'Robotics',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Robotics.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'ROS2',
        status: 'Incubating',
        gitHub: 'https://github.com/eProsima/Fast-DDS',
        docker: '',
        documentation: ''
    },
    {
        name: 'Micro XRCE-DDS',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/eprosima.png',
        type: 'Robotics',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Robotics.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'DDS',
        status: 'Incubating',
        gitHub: 'https://github.com/eProsima/Micro-XRCE-DDS',
        docker: '',
        documentation: ''
    },
    {
        name: 'FIROS',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Robotics',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Robotics.svg'/>",
        content: '',
        domain: 'IoT Devices',
        technology: 'ROS',
        status: 'Incubating',
        gitHub: 'https://github.com/iml130/firos',
        docker: '',
        documentation: ''
    },
    {
        name: 'Domibus',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Third Party',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ThirdParty.svg'/>",
        content: '',
        domain: 'Data Exchange',
        technology: 'eDelivery',
        status: 'Incubating',
        gitHub: 'https://ec.europa.eu/digital-building-blocks/code/scm/edelivery/domibus.git',
        docker: '',
        documentation: ''
    },
    {
        name: 'Oliot',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Third Party',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ThirdParty.svg'/>",
        content: '',
        domain: 'Event Processing',
        technology: 'EPCIS',
        status: 'Incubating',
        gitHub: 'https://github.com/yalewkidane/FIWARE_EPCIS_Mediation_Gateway',
        docker: '',
        documentation: ''
    },
    {
        name: 'Wirecloud',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/ficodes.png',
        type: 'Visualisation',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Visualization.svg'/>",
        content: '',
        domain: '',
        technology: '',
        status: 'Full',
        gitHub: 'https://github.com/Wirecloud/wirecloud',
        docker: '',
        documentation: ''
    },
    {
        name: 'FogFlow',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/nec.png',
        type: 'Processing',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ProcessingAnalysis.svg'/>",
        content: '',
        domain: 'Cloud-Edge',
        technology: '',
        status: 'Full',
        gitHub: 'https://github.com/smartfog/fogflow',
        docker: '',
        documentation: ''
    },
    {
        name: 'Perseo',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Processing',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_ProcessingAnalysis.svg'/>",
        content: '',
        domain: 'Event Processing',
        technology: 'HTTP,eMail,SMS',
        status: 'Incubating',
        gitHub: 'https://github.com/telefonicaid/perseo-fe',
        docker: '',
        documentation: ''
    },
    {
        name: 'Keyrock',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/university-politecnica-of-madrid.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'Identity Manager,PDP',
        technology: 'Keyrock',
        status: 'Full',
        gitHub: 'https://github.com/ging/fiware-idm',
        docker: '',
        documentation: ''
    },
    {
        name: 'Wilma',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/university-politecnica-of-madrid.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'PEP Proxy',
        technology: 'Keyrock',
        status: 'Full',
        gitHub: 'https://github.com/ging/fiware-pep-proxy',
        docker: '',
        documentation: ''
    },
    {
        name: 'AuthZForce',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'PDP',
        technology: 'XACML',
        status: 'Full',
        gitHub: 'https://github.com/authzforce/server',
        docker: '',
        documentation: ''
    },
    {
        name: 'CKAN extensions',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/ficodes.png',
        type: 'Data Publication',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DataPublication.svg'/>",
        content: '',
        domain: '',
        technology: 'CKAN',
        status: 'Full',
        gitHub: 'https://github.com/conwetlab/FIWARE-CKAN-Extensions',
        docker: '',
        documentation: ''
    },
    {
        name: 'Biz Framework',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/ficodes.png',
        type: 'Data Monetization',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DataMonetization.svg'/>",
        content: '',
        domain: '',
        technology: '',
        status: 'Full',
        gitHub: 'https://github.com/FIWARE-TMForum/Business-API-Ecosystem',
        docker: '',
        documentation: ''
    },
    {
        name: 'Idra',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/engineering.png',
        type: 'Data Publication',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_DataPublication.svg'/>",
        content: '',
        domain: '',
        technology: 'CKAN,DKAN,SOCRATA',
        status: 'Full',
        gitHub: 'https://github.com/OPSILab/Idra',
        docker: '',
        documentation: ''
    },
    {
        name: 'APInf',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'API Management',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_APIManagement.svg'/>",
        content: '',
        domain: '',
        technology: '',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/api-umbrella',
        docker: '',
        documentation: ''
    },
    {
        name: 'CoatRack',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/atb-bremen.png',
        type: 'API Management',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_APIManagement.svg'/>",
        content: '',
        domain: '',
        technology: '',
        status: 'Incubating',
        gitHub: 'https://github.com/coatrack/coatrack',
        docker: '',
        documentation: ''
    },
    {
        name: 'Endpoint-Auth-Service',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'API Management',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_APIManagement.svg'/>",
        content: '',
        domain: '',
        technology: '',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/endpoint-auth-service',
        docker: '',
        documentation: ''
    },
    {
        name: 'Kong Plugins',
        img: 'https://www.fiware.org/wp-content/directories/enablers/images/webinar-default.png',
        type: 'API Management',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_APIManagement.svg'/>",
        content: '',
        domain: '',
        technology: 'Keycloak,Keyrock',
        status: 'Incubating',
        gitHub: 'https://github.com/FIWARE/kong-plugins-fiware',
        docker: '',
        documentation: ''
    },
    {
        name: 'TRUE Connector',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/engineering.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'Data Exchange',
        technology: 'IDS',
        status: 'Incubating',
        gitHub: 'https://github.com/Engineering-Research-and-Development/fiware-true-connector',
        docker: '',
        documentation: ''
    },
    {
        name: 'Steelskin',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'PEP Proxy',
        technology: '',
        status: 'Incubating',
        gitHub: 'https://github.com/telefonicaid/fiware-pep-steelskin',
        docker: '',
        documentation: ''
    },
    {
        name: 'Keypass',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: 'PDP',
        technology: 'XACML',
        status: 'Incubating',
        gitHub: 'https://github.com/telefonicaid/fiware-keypass',
        docker: '',
        documentation: ''
    },
    {
        name: 'Keystone SCIM',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: '',
        technology: 'Keystone',
        status: 'Incubating',
        gitHub: 'https://github.com/telefonicaid/fiware-keystone-scim',
        docker: '',
        documentation: ''
    },
    {
        name: 'Keystone SPASSWORD',
        img: 'https://www.fiware.org/wp-content/directories/organisations/images/telefonica.png',
        type: 'Security',
        badge: "<img src='https://www.fiware.org/style/imgs/Badges/Badge_FIWARE_Security.svg'/>",
        content: '',
        domain: '',
        technology: 'Keystone',
        status: 'Incubating',
        gitHub: 'https://github.com/telefonicaid/fiware-keystone-spassword',
        docker: '',
        documentation: ''
    }
];
